{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SUDA-Delfi\\\\OneDrive\\\\Escritorio\\\\frontEnd 3\\\\fe3-final\\\\src\\\\Components\\\\utils\\\\global.context.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContextGlobal = /*#__PURE__*/createContext();\nexport const ContextProvider = ({\n  children\n}) => {\n  _s();\n  const [dentists, setDentists] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(data => {\n      setDentists(data);\n      setLoading(false);\n    }).catch(error => {\n      console.error('Error fetch del dentista:', error);\n      setLoading(false);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {\n      dentists,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(ContextProvider, \"NUNYgYKOFnsFtIgOjhV/8rDeXJ8=\");\n_c = ContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","ContextGlobal","ContextProvider","children","_s","dentists","setDentists","loading","setLoading","fetch","then","response","json","data","catch","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SUDA-Delfi/OneDrive/Escritorio/frontEnd 3/fe3-final/src/Components/utils/global.context.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\nexport const ContextGlobal = createContext();\n\n\nexport const ContextProvider = ({ children }) => {\n  const [dentists, setDentists] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(data => {\n        setDentists(data);\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error('Error fetch del dentista:', error);\n        setLoading(false);\n      });\n  }, []);\n\n  return (\n    <ContextGlobal.Provider value={{ dentists, loading }}>\n      {children}\n    </ContextGlobal.Provider>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,OAAO,MAAMC,aAAa,gBAAGL,aAAa,CAAC,CAAC;AAG5C,OAAO,MAAMM,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IAEdW,KAAK,CAAC,4CAA4C,CAAC,CAChDC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACZP,WAAW,CAACO,IAAI,CAAC;MACjBL,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,CACDM,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDP,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBACER,OAAA,CAACC,aAAa,CAACgB,QAAQ;IAACC,KAAK,EAAE;MAAEb,QAAQ;MAAEE;IAAQ,CAAE;IAAAJ,QAAA,EAClDA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAAClB,EAAA,CAvBWF,eAAe;AAAAqB,EAAA,GAAfrB,eAAe;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}